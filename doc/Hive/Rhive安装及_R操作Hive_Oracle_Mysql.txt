参考：http://www.cnblogs.com/end/archive/2013/02/18/2916105.html
http://blog.csdn.net/yucan1001/article/details/21562551
https://github.com/nexr/RHive
1、安装rJava、RHive 的tar.gz包
		R CMD INSTALL rJava_*.tar.gz
		R CMD INSTALL Rserve_*.tar.gz 	//Rserve已安装
		R CMD INSTALL RHive_*.tar.gz
		
报错：ERROR: configuration failed for package ‘rJava’
解决：
R CMD javareconf
R CMD javareconf -e


2、security.AccessControlException: Permission denied: user=anonymous, access=EXECUTE, inode="/tmp":root:supergroup:drwxrwx---
	解决：hadoop fs -chmod -R 777 /tmp


启动Rserve、Hadoop集群、hiveserver2服务：
R CMD Rserve --RS-enable-remote
start-all.sh
nohup hive --service hiveserver2 &


3、R 进入：
library(rJava)
library(RHive)

连接：
	   
rhive.connect(host ='node80')  或  rhive.connect('node80')  

数据库、表操作：
rhive.show.databases()
rhive.list.databases
rhive.use.database('hcat')

rhive.show.tables()
rhive.list.tables()

rhive.desc.table('wordcount');
rhive.exist.table('wordcount'); //是否存在表

rhive.load.table(tableName, fetchSize=50, limit=-1)
rhive.load.table2(tableName, limit=-1, remote=TRUE)

rhive.size.table(tableName)
rhive.drop.table(tableName, list)
==============================

加载数据
rhive.load.table(tableName, fetchSize=50, limit=-1)
rhive.load.table2(tableName, limit=-1, remote=TRUE)
例如：
rhive.load.table('hcatin', fetchSize=3, limit=-1)

查询
rhive.query(query, fetchSize=50, limit=-1)
rhive.big.query(query ,fetchSize=50, limit=-1, memLimit=64*1024*1024)	  

例如：	  
rhive.query('use hcat')
rhive.query('select * from hcatin')
rhive.query('show tables')
rhive.query('drop table hcatout2')
d2 <- rhive.query('select * from wc limit 5')		//"data.frame"
rhive.query('select count(*) from wc')		//会启动MR任务，8088可看到任务。

导出数据

rhive.write.table(data, tableName, sep=",", naString=NULL, rowName=FALSE,
       rowNameColumn="rowname")

rhive.write.table(d2,'rht2', sep=" ", naString=NULL, rowName=TRUE,rowNameColumn="rn2")

rhive.write.table(d2,'rht5', sep=",", naString=NULL, rowName=TRUE,rowNameColumn="rn2")



===================================================
HDFS操作:
rhive.hdfs.cat(path="hdfs://node80:8020/a.txt")

===================================================

注意：最后要关闭连接
rhive.close()

=========================================================================
====================================================================================
基于Hadoop伪分布式集群安装

参考：
下载：https://github.com/nexr/RHive
问题：https://github.com/nexr/RHive/issues/50
http://www.cnblogs.com/end/archive/2013/02/18/2916105.html
http://blog.csdn.net/yucan1001/article/details/21562551
http://bi.dataguru.cn/article-4107-1.html

1、安装rJava、RHive 的tar.gz包
		R CMD INSTALL rJava_*.tar.gz
		R CMD INSTALL Rserve_*.tar.gz 	//Rserve已安装
		R CMD INSTALL RHive_*.tar.gz
		
报错：ERROR: configuration failed for package ‘rJava’
解决：
R CMD javareconf
R CMD javareconf -e


2、security.AccessControlException: Permission denied: user=anonymous, access=EXECUTE, inode="/tmp":root:supergroup:drwxrwx---
	解决：hadoop fs -chmod -R 777 /tmp


启动Rserve、Hadoop集群、hiveserver2服务：
R CMD Rserve --RS-enable-remote
start-all.sh
nohup hive --service hiveserver2 &

https://github.com/nexr/RHive.git

安装：RMySQL:
yum install mysql-devel.x86_64
R CMD INSTALL RMySQL_0.10.8.tar.gz
安装：RODBC:
configure: error: "ODBC headers sql.h and sqlext.h not found"
ERROR: configuration failed for package ‘RODBC’

解决:
mount -o loop  /media/iso/CentOS-6.7-x86_64-bin-DVD1.iso /media/centos/
yum install unixODBC.x86_64 -y
yum install unixODBC-devel.x86_64 -y

R CMD INSTALL RODBC_1.3-13.tar.gz

Linux配置R连接oracle：

驱动路径（4个zip）：
上传4个*.zip文件到/root下，
unzip instantclient-basic-linux.x64-12.1.0.2.0.zip
unzip instantclient-odbc-linux.x64-12.1.0.2.0.zip
unzip instantclient-sdk-linux.x64-12.1.0.2.0.zip
unzip instantclient-sqlplus-linux.x64-12.1.0.2.0.zip

/root/instantclient_12_1

unixODBC:(编译安装，/usr/local,下面只有share目录)
http://blog.csdn.net/lichangzai/article/details/40304077
http://www.jianshu.com/p/4b99a686fe9e
http://blog.csdn.net/faith_mo_blog/article/details/39477009


vi tnsnames.ora
GZBDDB = 
	(DESCRIPTION = 
		(ADDRESS_LIST = 
			(ADDRESS = (PROTOCOL = TCP)(HOST =10.164.143.122)(PORT = 1521))
		)			
		(CONNECT_DATA =
			(SERVICE_NAME = gzbddb)
		)
	)

ORCL = 
	(DESCRIPTION = 
		(ADDRESS_LIST = 
			(ADDRESS = (PROTOCOL = TCP)(HOST =192.168.0.232)(PORT = 1521))
		)			
		(CONNECT_DATA =
			(SERVICE_NAME = ORCL)
		)
	)

ORCL =(DESCRIPTION =(ADDRESS_LIST =(ADDRESS =(PROTOCOL= TCP)(HOST= 192.168.0.232)(PORT=1521)))(CONNECT_DATA =(SERVICE_NAME = orcl)))   //SERVICE_NAME = ORCL也可以
EXTPROC_CONNECTION_DATA =(DESCRIPTION =(ADDRESS_LIST =(ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1)))
(CONNECT_DATA =(SID = PLSExtProc)(PRESENTATION = RO)))

vi listener.ora

SID_LIST_LISTENER =(SID_LIST =(SID_DESC =(SID_NAME = PLSExtProc)(ORACLE_HOME = /home/oracle/oracleClient )         //注意，这个是刚才配置的$ORACLE_HOME(PROGRAM = extproc)))
LISTENER =(DESCRIPTION_LIST =(DESCRIPTION =(ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1))                 (ADDRESS = (PROTOCOL = TCP)(HOST = 172.16.0.73)(PORT = 1521))      //这个上面有说明 ))

=============================
isql OracleODBC-12c lspf_csgdata lspf_csgdata
con=odbcConnect("OracleODBC-12c",uid="lspf_csgdata",pwd="lspf_csgdata")

lspf_csgdata/lspf_csgdata

con=odbcConnect("OracleODBC-12c",uid="yxsc_er",pwd="123")
data1=sqlQuery(con,'select zzid, zzrbs,zzsj from ZW_ZZXX where  rownum < 5')

sqlSave(channel, dat, tablename = NULL, append = FALSE,
             rownames = TRUE, colnames = FALSE, verbose = FALSE,
             safer = TRUE, addPK = FALSE, typeInfo, varTypes,
             fast = TRUE, test = FALSE, nastring = NULL)
     
     sqlUpdate(channel, dat, tablename = NULL, index = NULL,
               verbose = FALSE, test = FALSE, nastring = NULL,
               fast = TRUE)

			   
sqlSave(con, data1, tablename = 'zzz04', append = FALSE,
             rownames = TRUE, colnames = FALSE, verbose = FALSE,
             safer = TRUE, addPK = FALSE, fast = TRUE, test = FALSE, nastring = NULL)
data1=sqlQuery(con,'select "TO_CHAR"(zzid),ZZRBS,"TO_CHAR"(zzsj) from ZW_ZZXX where  rownum < 5')
sqlSave(con,data1,tablename='zzz07',append=FALSE,rownames=TRUE,colnames=FALSE,verbose=FALSE,safer=TRUE,addPK=FALSE,fast=TRUE,test=FALSE,nastring=NULL)	 


sqlSave(con,data1,tablename='zzz03',append=FALSE,rownames=TRUE,colnames=FALSE)	 
			 
			 
channel: connection handle returned by ‘odbcConnect’.

     dat: a data frame.

tablename: character: a database table name accessible from the
          connected DSN.  If missing, the name of ‘dat’.

   index: character.  Name(s) of index column(s) to be used.

  append: logical.  Should data be appended to an existing table?

rownames: either logical or character.  If logical, save the row names
          as the first column ‘rownames’ in the table?  If character,
          the column name under which to save the rownames.

colnames: logical: save column names as the first row of table?

 verbose: display statements as they are sent to the server?

   safer: logical. If true, create a non-existing table but only allow
          appends to an existing table. If false, allow ‘sqlSave’ to
          attempt to delete all the rows of an existing table, or to
          drop it.

   addPK: logical.  Should rownames (if included) be specified as a
          primary key?

typeInfo: optional list of DBMS datatypes.  Should have elements named
          ‘"character"’, ‘"double"’ and ‘"integer"’.

varTypes: an optional named character vector giving the DBMSs datatypes
          to be used for some (or all) of the columns if a table is to
          be created.

    fast: logical.  If false, write data a row at a time.  If true, use
          a parametrized ‘INSERT INTO’ or ‘UPDATE’ query to write all
          the data in one operation.

    test: logical: if ‘TRUE’ show what would be done, only.

nastring: optional character string to be used for writing ‘NA’s to the
          database.  See ‘Details’.

