查看当前服务器是运行在VM还是在实体机中：dmidecode -s system-product-name

例如，运行的是实体机结果则输出实体机的名称：
[root@cdh-master cdh]# dmidecode -s system-product-name
PowerEdge R730
运行在虚拟机中则输出虚拟软件名称：
[root@cdh-slave2 ~]# dmidecode -s system-product-name
VMware Virtual Platform

===============
VGA,DVI,HDMI的区别：VGA和DVI不能传音频，HDMI可以传输视频和音频！

VGA接头：针数为15的视频接口，主要用于老式的电脑输出。VGA输出和传递的是模拟信号。大家都知道计算机显卡产生的是数字信号，
显示器使用的也是数字信号。所以使用VGA的视频接口相当于是经历了一个数模转换和一次模数转换。信号损失，显示较为模糊。

DVI接口：DVI接口有两个标准，25针和29针，如下图所示。直观来说，这两种接口没有区别。DVI接口传输的是数字信号，
可以传输大分辨率的视频信号。DVI连接计算机显卡和显示器时不用发生转换，所以信号没有损失。

HDMI接口：HDMI接口传输的也是数字信号，所以在视频质量上和DVI接口传输所实现的效果基本相同。HDMI接口还能够传送音频信号。
假如显示器除了有显示功能，还带有音响时，HDMI的接口可以同时将电脑视频和音频的信号传递给显示器。HDMI有三个接口。
主要考虑到设备的需要。如数码相机的体积小，需要小的接口，就使用micro HDMI。三种接口只是在体积上有区别，功能相同。
============================================
准备环境：http://blog.csdn.net/chang_ge/article/details/52650952

* 计算机是否有Nvidia出厂的GPU，及其型号，compute Capability是否大于等于3.0？
1）lspci | grep -i vga  或者 lspci |grep -i nvidia
2）查看页面：https://developer.nvidia.com/cuda-gpus

* 显卡驱动

* 计算机所运行的Linux版本，Kernel headers，GCC，GLIBC是否被CUDA所支持？
cat /etc/redhat-release
uname -a
gcc -version

1）查看页面：http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#axzz4VZnqTJ2A

* 下载NVIDIA CUDA Toolkit。（Toolkit已经包含了cuda driver，cuda应用程序创建、运行需要的工具以及运行库、头文件、cuda源码例子等）



===================
nvidia支持cuda的显卡类型列表及其Compute Capability :
https://developer.nvidia.com/cuda-gpus

nvidia下载主页面：
https://developer.nvidia.com/accelerated-computing-toolkit


nvidia显卡驱动下载：（可以看到最新的驱动支持哪些显卡型号）
www.nvidia.com/drivers

cuda下载列表：
https://developer.nvidia.com/cuda-toolkit-archive

cuDNN各版本列表：（需登录）
https://developer.nvidia.com/rdp/cudnn-download（只显示最新的一页，历史版本，在该网页的最下面为：https://developer.nvidia.com/rdp/cudnn-archive）

nvidia官网CUDA安装教程（包含cuda版本支持的环境）：http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#axzz4VZnqTJ2A


驱动安装：http://www.linuxidc.com/Linux/2017-03/141644.htm
禁用nouveau参考：http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#runfile-nouveau-rhel
vi /etc/modprobe.d/blacklist-nouveau.conf
blacklist nouveau
options nouveau modeset=0

dracut --force
执行后：需重启电脑，生效，再执行：lsmod | grep nouveau，没有结果则ok。

lsmod | grep nouveau

可直接卸载kernel-devel、kernel-headers，
rpm -e --nodeps 包名

rpm -qa | grep kernel*

yum install gcc-c++
yum install kernel-devel

yum install dkms
./NVIDIA-Linux-x86_64-384.66.run --kernel-source-path /usr/src/kernels/3.10.0-693.11.1.el7.x86_64 --dkms -s

安装cuda过程：不安装openlib：n,不再执行nvidia-xconfig(前提是安装驱动后，手动执行nvidia-xconfig命令)：n



再安装核心版本一致的包，（可从/media中找到对应的包）

实例规格：ecs.gn5i-c2g1.large  c2:代表2个cpu，g1:代表一个gpu

卸载cuda，执行文件: /usr/local/cuda-9.1/bin/uninstall_cuda_9.1.pl


安装cuda时报错：Missing recommended library: libGLU.so
解决：
yum install freeglut  freeglut-devel  libX11 libX11-devel libXmu libXmu-devel libXi libXi-devel
上面的包是ubuntu的安装方式，centos中，包名可能不太一样，可先搜索一下：
比如：  yum search freeglut
yum search libx11
安装时包名区分大小写，默认安装x86_64.


Installing : 1:xorg-x11-drv-nvidia-375.26-1.el7.x86_64                                                                                          79/130
Error unpacking rpm package 1:xorg-x11-drv-nvidia-375.26-1.el7.x86_64
warning: /etc/modprobe.d/blacklist-nouveau.conf created as /etc/modprobe.d/blacklist-nouveau.conf.rpmnew
error: unpacking of archive failed on file /etc/vulkan/icd.d/nvidia_icd.json;5a4df15f: cpio: rename
  Installing : libXcomposite-0.4.4-4.1.el7.x86_64                                                                                                 80/130
error: xorg-x11-drv-nvidia-1:375.26-1.el7.x86_64: install failed


error while loading shared libraries: libpython3.6.so.1.0: cannot open shared object file: No such file or directory
解决：http://blog.csdn.net/wanyanxgf/article/details/8021641
vi /etc/ld.so.conf
在/etc/ld.so.conf中添加/usr/local/lib

执行：/sbin/ldconfig -v


drivers for cuda 9.1:
wget http://us.download.nvidia.com/tesla/384.81/NVIDIA-Linux-x86_64-384.81.run
cuda9.1:
wget https://developer.nvidia.com/compute/cuda/9.1/Prod/local_installers/cuda_9.1.85_387.26_linux
cudnn for cuda9.1:
wget https://developer.nvidia.com/compute/machine-learning/cudnn/secure/v7.0.5/prod/9.1_20171129/cudnn-9.1-linux-x64-v7


wget http://us.download.nvidia.com/XFree86/Linux-x86_64/384.66/NVIDIA-Linux-x86_64-384.66.run

wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run
wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/patches/2/cuda_8.0.61.2_linux-run

wget https://developer.nvidia.com/compute/machine-learning/cudnn/secure/v6/prod/8.0_20170307/cudnn-8.0-linux-x64-v6.0-tgz


安装Cudnn:
cp cuda/include/cudnn.h /usr/local/cuda-8.0/include/
cp cuda/lib64/libcudnn* /usr/local/cuda-8.0/lib64/
chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda-8.0/lib64/libcudnn*


nvidia 驱动：NVIDIA-Linux-x86_64-384.66.run(是否也可以选择最新的驱动)
tensorflow-gpu 1.3/1.4  对应  cuda_8.0.44_linux-run  cudnn-8.0-linux-x64-v6.0.tgz

执行：import tensorflow as tf 时报错如下:
ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory
或
ImportError: libcublas.so.5.0: cannot open shared object file:

分析：根本原因是：使用了pip 这种二进制方式安装tensorflow，官方编译tensorflow时，当时指定了固定的版本，tensorflow-gpu/1.5去找libcublas.so.9.0

NVIDIA-SMI has failed because it couldn't communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running.


wget https://pypi.python.org/packages/b8/16/14fbe414f2b3c39c5d01521e38e7aaec384f8fbf26eec021d247345260c3/tensorflow_gpu-1.3.0-cp36-cp36m-manylinux1_x86_64.whl#md5=7b694289e1fc977a47cd89f2876d3528


tensorflow github: https://github.com/tensorflow/tensorflow

tensorflow版本信息，包括支持的cuda、cudnn版本：https://github.com/tensorflow/tensorflow/blob/master/RELEASE.md


编译安装tensorflow，指定cuda,cudnn版本：http://blog.csdn.net/huangbo1221/article/details/78986959


TensorFlow各版本自主下载地址：
cpu版本：
https://pypi.python.org/pypi/tensorflow/1.4.0
gpu版本：
https://pypi.python.org/pypi/tensorflow-gpu/1.4.0
切换版本号：只要把后面的版本号改一下就行了

tensorflow官网：https://tensorflow.google.cn/install/install_windows


cat /proc/driver/nvidia/version
nvcc -V
nvidia-smi
check /dev/nvidia*
prime-select query
=================================

单机安装cuda,可以直接执行 ./cuda_8.0.XX_linux.run ，然后按照提示一步步的安装。但是当有多台机器的需要安装时，这种交互安装就麻烦了。最好有命令行的方式，一步安装。
./cuda_8.0.xx_linux.run 提供了这种批量安装的方式：
./cuda_8.0.44_linux.run  --silent   --driver --toolkit  --toolkitpath=/tmp/ --samples  --samplespath=/tmp/  --verbose

--silent   执行无用户交互的安装，基于后面的参数进行用户定制化安装，必须要有这个参数
--driver   安装cuda Driver
--toolkit   安装CUDA Toolkit
--toolkitpath=<path>  cuda  toolkit 的安装目录
   Install the CUDA Toolkit to the <path> directory. If this flag is not
    provided, the default path of /usr/local/cuda-8.0 is used.

--samples 安装samples
--samplespath=<path>         samples 的安装目录
  Install the CUDA Samples to the <path> directory. If this flag is not
    provided, the default path of /root/NVIDIA_CUDA-8.0_Samples is used.
 --verbose 打印安装日志

以下三个参数备用：

 --no-opengl-libs
    Prevents the driver installation from installing NVIDIA's GL libraries.
    Useful for systems where the display is driven by a non-NVIDIA GPU.
    In such systems, NVIDIA's GL libraries could prevent X from loading
    properly.

  --kernel-source-path=<path>
    Tells the driver installation to use <path> as the kernel source directory
    when building the NVIDIA kernel module. Required for systems where the
    kernel source is installed to a non-standard location.

  --run-nvidia-xconfig
    Tells the driver installation to run nvidia-xconfig to update the system
    X configuration file so that the NVIDIA X driver is used. The pre-existing
    X configuration file will be backed up.

    This option should not be used on systems that require a custom
    X configuration, or on systems where a non-NVIDIA GPU is rendering the
    display.